{"version":3,"sources":["App.js","serviceWorker.js","index.js","authaxios.js"],"names":["App","props","handleChanges","e","preventDefault","target","name","value","setState","state","avail","default","trending","search","searchans","collapse","isWideEnough","onClick","bind","instance","get","this","api_key","res","data","result","console","log","className","style","textDecoration","map","type","src","embed_url","width","height","title","clasName","onChange","Search","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","axios","create","baseURL","mode","headers","module","export","instances","accept","boundary"],"mappings":"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","file":"static/js/main.b4443bb8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport instance from \"./authaxios\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      avail: \"yes\",\n      default: 0,\n      trending: [],\n      search: \"\",\n      searchans: [],\n      collapse: false,\n      isWideEnough: false,\n    };\n    this.onClick = this.onClick.bind(this);\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n  }\n  handleChanges = (e) => {\n    e.preventDefault();\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n  async Search() {\n    try {\n      let res = await instance.get(\n        \"/search?api_key=BBllUXSslRRw4234LL4rT5VfMbKLLG6A&limit=10&q=\" +\n          this.state.search,\n        {\n          api_key: \"BBllUXSslRRw4234LL4rT5VfMbKLLG6A\",\n        }\n      );\n      let result = await res.data.data;\n\n      this.setState({ searchans: result });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async componentDidMount() {\n    try {\n      let res = await instance.get(\n        \"/trending?api_key=BBllUXSslRRw4234LL4rT5VfMbKLLG6A&limit=10\",\n        {\n          api_key: \"BBllUXSslRRw4234LL4rT5VfMbKLLG6A\",\n        }\n      );\n      let result = await res.data.data;\n\n      this.setState({ trending: result });\n    } catch (e) {\n      console.log(e);\n    }\n    console.log(\"yes\");\n    console.log(this.state.trending);\n  }\n\n  onClick() {\n    this.setState({\n      collapse: !this.state.collapse,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"topper\">\n          <div className=\"centertopper\">\n            <h1>Giphy Api Integration</h1>\n            <h1>\n              {this.state.default !== 1 && (\n                <>\n                  <button\n                    className=\"normal\"\n                    onClick={() => this.setState({ default: 1 })}\n                  >\n                    Trending\n                  </button>\n                </>\n              )}\n              {this.state.default === 1 && (\n                <>\n                  <button\n                    className=\"normal\"\n                    style={{ textDecoration: \"underline\" }}\n                    onClick={() => this.setState({ default: 1 })}\n                  >\n                    Trending\n                  </button>\n                </>\n              )}\n              |\n              {this.state.default !== 2 && (\n                <>\n                  <button\n                    className=\"normal\"\n                    onClick={() => this.setState({ default: 2 })}\n                  >\n                    Search\n                  </button>\n                </>\n              )}\n              {this.state.default === 2 && (\n                <>\n                  <button\n                    className=\"normal\"\n                    style={{ textDecoration: \"underline\" }}\n                    onClick={() => this.setState({ default: 2 })}\n                  >\n                    Search\n                  </button>\n                </>\n              )}\n            </h1>\n            {this.state.default === 0 ? (\n              <p>Click any of the links above</p>\n            ) : this.state.default === 1 ? (\n              <p>Trending list of Giphy:</p>\n            ) : (\n              <p>Search List of Giphy:</p>\n            )}\n          </div>\n        </div>\n        {this.state.default === 1 && (\n          <>\n            <div className=\"lower-imager\">\n              {this.state.trending.map((data) => (\n                <>\n                  <div className=\"circular\">\n                    <embed\n                      type=\"image/jpg\"\n                      src={\"\" + data.embed_url}\n                      width=\"150\"\n                      height=\"70\"\n                    />\n                    <p>{data.title}</p>\n                  </div>\n                </>\n              ))}\n            </div>\n          </>\n        )}\n        {this.state.default === 2 && (\n          <>\n            <div clasName=\"lower-images\">\n              <input type=\"text\" onChange={this.handleChanges} name=\"search\" />\n              <button onClick={() => this.Search()}>Search</button>\n              <p>\n                search results for{\" \"}\n                <i style={{ color: \"maroon\", textDecoration: \"underline\" }}>\n                  {this.state.search}\n                </i>\n              </p>\n              <div className=\"lower-imager\">\n                {this.state.searchans.map((data) => (\n                  <>\n                    <div className=\"circular\">\n                      <embed\n                        type=\"image/jpg\"\n                        src={\"\" + data.embed_url}\n                        width=\"150\"\n                        height=\"70\"\n                      />\n\n                      <p>{data.title}</p>\n                    </div>\n                  </>\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"react-mdl/extra/material.css\";\nimport \"react-mdl/extra/material.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.giphy.com/v1/gifs\",\n  mode: \"cors\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nconst instances = (props) =>\n  axios.create({\n    baseURL: \"https://api.giphy.com/v1/gifs\",\n    mode: \"cors\",\n    headers: {\n      accept: \"application/json\",\n      \"Accept-Language\": \"en-US,en;q=0.8\",\n      \"Content-Type\": `multipart/form-data; boundary=${props.boundary}`,\n    },\n  });\nexport default instance;\nmodule.export = {\n  instance: instance,\n  instances: instances,\n};\n"],"sourceRoot":""}